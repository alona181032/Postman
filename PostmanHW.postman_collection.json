{
	"info": {
		"_postman_id": "00dc5991-284f-473f-8a2b-fceed106f3dd",
		"name": "PostmanHW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21536613"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first?name=Alona&age=7",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Alona"
						},
						{
							"key": "age",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let requestData = request.data \r",
							"let requestName = requestData.name\r",
							"let requestAge = requestData.age\r",
							"let requestSalary = +requestData.salary\r",
							"let resp_salary_1_5_year = +requestSalary * 4\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData.name).to.eql (requestName);\r",
							"});\r",
							"pm.test(\"Age\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData.age).to.eql(requestAge);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData.salary).to.eql(requestSalary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"    let responseData= pm.response.json();\r",
							"console.log (responseData.family)\r",
							"\r",
							"pm.test(\"Salary\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData.family.u_salary_1_5_year).to.eql(resp_salary_1_5_year);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alona",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3?user=Alona&age=31&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "user",
							"value": "Alona"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить реквест\r",
							"let requestData = pm.request.url.query.toObject();\r",
							"console.log (requestData)\r",
							"\r",
							"// Спарсить респонс\r",
							"let responseData = pm.response.json()\r",
							"console.log (responseData)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\", function () {\r",
							"    let nameRequest = requestData.name;\r",
							"    pm.expect(responseData.name).to.eql (nameRequest);\r",
							"});\r",
							"\r",
							"// / Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age\", function () {\r",
							"    let ageRequest = requestData.age;\r",
							"    pm.expect(responseData.age).to.eql (ageRequest);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary\", function () {\r",
							"    let salaryRequest = +requestData.salary;\r",
							"    pm.expect(responseData.salary).to.eql (salaryRequest);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log (responseData.family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog have name\", function () {\r",
							"         pm.expect(responseData.family.pets.dog).haveOwnProperty(\"name\");\r",
							"        \r",
							"});\r",
							"//  Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Dog have age\", function () {\r",
							"         pm.expect(responseData.family.pets.dog).haveOwnProperty(\"age\");      \r",
							"});\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog have Luki\", function () {\r",
							"         pm.expect(responseData.family.pets.dog.name).to.eql(\"Luky\");      \r",
							"});\r",
							"// Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Dog age 4\", function () {\r",
							"         pm.expect(responseData.family.pets.dog.age).to.eql(4);      \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Alona&age=31&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alona"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let responseData = pm.response.json ()\r",
							"console.log (responseData)\r",
							"\r",
							"// Спарсить реквест\r",
							"let requestData = pm.request.url.query.toObject()\r",
							"console.log (requestData)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\", function () {\r",
							"       let nameRequest = requestData.name;\r",
							"    pm.expect(responseData.name).to.eql (nameRequest);\r",
							"});\r",
							" pm.test(\"Age\", function() {\r",
							"     let ageRequest = +requestData.age;\r",
							"     pm.expect(responseData.age).to.eql (ageRequest);\r",
							" });\r",
							"//  7. Вывести в консоль параметр salary из request.\r",
							"console.log (requestData.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response\r",
							"console.log (responseData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log (responseData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary из response\r",
							"console.log (responseData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary из response\r",
							"console.log (responseData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Salary 0\", function() {\r",
							"     let salaryRequest = requestData.salary;\r",
							"     console.log(requestData.salary, responseData.salary)\r",
							"     pm.expect(responseData.salary[0]).to.eql (+salaryRequest);    \r",
							" });\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Salary*2\", function() {\r",
							"     let salaryRequest = +requestData.salary * 2;\r",
							"     let salaryResponse = +responseData.salary[1];\r",
							"     pm.expect(salaryResponse).to.eql (salaryRequest);    \r",
							" });\r",
							"\r",
							"//  14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							" pm.test(\"Salary*3\", function() {\r",
							"     let salaryRequest = +requestData.salary * 3;\r",
							"     let salaryResponse = +responseData.salary [2];\r",
							"     pm.expect(salaryResponse).to.eql (salaryRequest);    \r",
							" });\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"let name = requestData.name\r",
							"pm.environment.set (\"name\", name);\r",
							"console.log(pm.environment.get(\"name\"))\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"let age = requestData.age\r",
							"pm.environment.set (\"age\", age);\r",
							"console.log(pm.environment.get(\"age\"))\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"let salary = requestData.salary\r",
							"pm.environment.set (\"salary\", salary);\r",
							"console.log(pm.environment.get(\"salary\"))\r",
							"\r",
							"for (let i = 0; i < responseData.salary.length; i++) {\r",
							" console.log(responseData.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Alona&age=31&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alona"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let responseData= pm.response.json();\r",
							"console.log (responseData)\r",
							"\r",
							"// 7. Спарсить request\r",
							"let requestData = request.data \r",
							"console.log (requestData)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"start_qa_salary\")\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Body matches string 6_months\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\")\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Body matches string 12_months\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Body matches string 1.5_year\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_year\r",
							"pm.test(\"Body matches string 3.5_year \", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_year\")\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Body matches string person \", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"person\")\r",
							"    });\r",
							"\r",
							"    // 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    let salaryRequest = +requestData.salary;\r",
							"    pm.expect(responseData.start_qa_salary).to.eql(salaryRequest);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    let salaryRequest = requestData.salary*2;\r",
							"    pm.expect(responseData.qa_salary_after_6_months).to.eql(salaryRequest);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    let salaryRequest = requestData.salary*2.7;\r",
							"    pm.expect(responseData['qa_salary_after_12_months']).to.eql(salaryRequest);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    let salaryRequest = requestData.salary*3.3;\r",
							"    pm.expect(responseData['qa_salary_after_1.5_year']).to.eql(salaryRequest);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_year\", function () {\r",
							"    let salaryRequest = requestData.salary*3.8;\r",
							"    console.log(responseData[\"qa_salary_after_3.5_years\"])\r",
							"     pm.expect(responseData[\"qa_salary_after_3.5_years\"]).to.eql(salaryRequest);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person\", function () {\r",
							"    let salaryRequest = requestData.salary;\r",
							"      console.log(responseData.person.u_name[1])\r",
							"     pm.expect(responseData.person.u_name[1]).to.eql(+salaryRequest);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"age\", function () {\r",
							"    let ageRequest = requestData.age;\r",
							"     pm.expect(responseData.person.u_age).to.eql(+ageRequest);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"salary\", function () {\r",
							"    let salaryRequest = requestData.salary*4.2;\r",
							"     pm.expect(responseData.person.u_salary_5_years).to.eql(salaryRequest);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (i = 0; i<=responseData.person.length; i++) {\r",
							"    console.log(responseData.person [i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Alona",
							"disabled": true
						},
						{
							"key": "age",
							"value": "31",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}